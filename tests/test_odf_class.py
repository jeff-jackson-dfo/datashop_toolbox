from odf_toolbox.basehdr import BaseHeader
from odf_toolbox.odfhdr import OdfHeader
from odf_toolbox.cruisehdr import CruiseHeader
from odf_toolbox.eventhdr import EventHeader
from odf_toolbox.generalhdr import GeneralCalHeader
from odf_toolbox.historyhdr import HistoryHeader
from odf_toolbox.qualityhdr import QualityHeader
from odf_toolbox.parameterhdr import ParameterHeader
from odf_toolbox.recordhdr import RecordHeader
from odf_toolbox import odfutils

# Start by creating an empty OdfHeader object
odf = OdfHeader()

# Set the file specification for testing purposes. Normally this is generated by the code after the Cruise and Event
# headers are filled out.
odf.file_specification = 'CTD_CAR2023573_039_1_DN.ODF'

# Add a cruise header
odf.cruise_header = CruiseHeader()
odf.cruise_header.cruise_number = 'CAR2023573'
odf.cruise_header.cruise_name = 'LABRADOR SEA'
odf.cruise_header.cruise_description = 'ATLANTIC ZONE OFF-SHELF MONITORING PROGRAM (AZOMP)'
odf.cruise_header.platform = 'CAPT JACQUES CARTIER'
odf.cruise_header.organization = 'DFO BIO'
odf.cruise_header.chief_scientist = 'MARC RINGUETTE'
odf.cruise_header.start_date = '24-MAY-2023 00:00:00.00'
odf.cruise_header.end_date = '12-JUN-2023 00:00:00.00'
odf.cruise_header.country_institute_code = 1810

# Add an event header
odf.event_header = EventHeader()
odf.event_header.data_type = 'CTD'
odf.event_header.event_number = '039'
odf.event_header.event_qualifier1 = '1'
odf.event_header.event_qualifier2 = 'DN'
odf.event_header.creation_date = "02-JAN-2023 07:56:35.00"
odf.event_header.initial_latitude = 44.5
odf.event_header.initial_longitude = -63.7
odf.event_header.end_latitude = -99.0
odf.event_header.end_longitude = -999.0
odf.event_header.min_depth = 0.0
odf.event_header.max_depth = 100.0
odf.event_header.sampling_interval = 0.125
odf.event_header.sounding = 115.0
odf.event_header.depth_off_bottom = odf.event_header.sounding - odf.event_header.max_depth
odf.event_header.set_event_comment("This file contains CTD data.")
odf.event_header.set_event_comment("This is the second event comment for testing purposes.")
odf.event_header.set_event_comment("The revised second event comment.", 2)

# Add a history header
odf.history_headers = list()
hh = HistoryHeader()
odf.history_headers.append(hh)

# Add a quality header
odf.quality_header = QualityHeader()
odf.quality_header.quality_date = '12-DEC-2024 12:14:46.00'
qtests = list()
qtests.append('QUALITY CONTROL TESTS RUN')
qtests.append('Test 2.1: GTSPP Global Impossible Parameter Values (4)')
qtests.append('Test 2.2: GTSPP Regional Impossible Parameter Values (8)')
qtests.append('Test 2.3: GTSPP Increasing Depth (16)')
# qtests.append('Test 2.3: GTSPP Decreasing Depth (16)', 4)
odf.quality_header.quality_tests = qtests
qcomments = list()
qcomments.append('QUALITY CODES')
qcomments.append('0: Value has not been quality controlled')
qcomments.append('1: Value seems to be correct')
qcomments.append('2: Value appears inconsistent with other values')
qcomments.append('3: Value seems doubtful')
qcomments.append('4: Value seems erroneous')
qcomments.append('5: Value was modified')
qcomments.append('9: Value is missing')
# qcomments.append('7: Unknown issue', 7)
odf.quality_header.quality_comments = qcomments

# Add an empty General_Cal_Header for testing purposes
gch = GeneralCalHeader()
odf.general_cal_headers.append(gch)

# Add a parameter header
ph = ParameterHeader()
ph.type = "DOUB"
ph.name = "Pressure"
ph.units = "decibars"
ph.code = "PRES_01"
ph.null_string = "-99.0"
ph.print_field_order = 1
ph.print_field_width = 11
ph.print_decimal_places = 3
ph.number_null = 0
ph.number_valid = 10
ph.minimum_value = 1.0
ph.maximum_value = 10.0
ph.depth = -99.0
ph.angle_of_section = -99.0
ph.magnetic_variation = -99.0
odf.parameter_headers = list()
odf.parameter_headers.append(ph)

# Add a record header
odf.record_header = RecordHeader()
odf.record_header.num_history = 1
odf.record_header.num_calibration = 0
odf.record_header.num_swing = 0
odf.record_header.num_param = 10
odf.record_header.num_cycle = 250

print("\n")
print("--------------------------------------------------------------------------------------------------------")
print("Printing the ODF file ...")
print("--------------------------------------------------------------------------------------------------------")
print("\n")
o = odf.print_object()
print(o)
